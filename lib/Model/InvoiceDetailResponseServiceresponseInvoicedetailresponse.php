<?php
/**
 * InvoiceDetailResponseServiceresponseInvoicedetailresponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ingram Micro eCommerce APIs
 *
 * Ingram Micro API collection for automating eCommerce business processes including orering and product search.
 *
 * OpenAPI spec version: 1.0
 * Contact: apiportalsupport@ingrammicro.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.14
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InvoiceDetailResponseServiceresponseInvoicedetailresponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceDetailResponseServiceresponseInvoicedetailresponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'invoiceDetailResponse_serviceresponse_invoicedetailresponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customernumber' => 'string',
'invoicenumber' => 'string',
'invoicedate' => '\DateTime',
'invoicetype' => 'string',
'customerordernumber' => 'string',
'customerfreightamount' => 'double',
'customerforeignfrightamt' => 'float',
'totaltaxamount' => 'double',
'totalamount' => 'double',
'shiptosuffix' => 'string',
'billtosuffix' => 'string',
'freightamount' => 'double',
'paymentterms' => 'string',
'orderdate' => 'string',
'carrier' => 'string',
'carrierdescription' => 'string',
'discountamount' => 'double',
'taxtype' => 'string',
'enduserponumber' => 'string',
'freightforwardercode' => 'string',
'creditmemoreasoncode' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customernumber' => null,
'invoicenumber' => null,
'invoicedate' => 'date',
'invoicetype' => null,
'customerordernumber' => null,
'customerfreightamount' => 'double',
'customerforeignfrightamt' => 'float',
'totaltaxamount' => 'double',
'totalamount' => 'double',
'shiptosuffix' => null,
'billtosuffix' => null,
'freightamount' => 'double',
'paymentterms' => null,
'orderdate' => null,
'carrier' => null,
'carrierdescription' => null,
'discountamount' => 'double',
'taxtype' => null,
'enduserponumber' => null,
'freightforwardercode' => null,
'creditmemoreasoncode' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customernumber' => 'customernumber',
'invoicenumber' => 'invoicenumber',
'invoicedate' => 'invoicedate',
'invoicetype' => 'invoicetype',
'customerordernumber' => 'customerordernumber',
'customerfreightamount' => 'customerfreightamount',
'customerforeignfrightamt' => 'customerforeignfrightamt',
'totaltaxamount' => 'totaltaxamount',
'totalamount' => 'totalamount',
'shiptosuffix' => 'shiptosuffix',
'billtosuffix' => 'billtosuffix',
'freightamount' => 'freightamount',
'paymentterms' => 'paymentterms',
'orderdate' => 'orderdate',
'carrier' => 'carrier',
'carrierdescription' => 'carrierdescription',
'discountamount' => 'discountamount',
'taxtype' => 'taxtype',
'enduserponumber' => 'enduserponumber',
'freightforwardercode' => 'freightforwardercode',
'creditmemoreasoncode' => 'creditmemoreasoncode'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customernumber' => 'setCustomernumber',
'invoicenumber' => 'setInvoicenumber',
'invoicedate' => 'setInvoicedate',
'invoicetype' => 'setInvoicetype',
'customerordernumber' => 'setCustomerordernumber',
'customerfreightamount' => 'setCustomerfreightamount',
'customerforeignfrightamt' => 'setCustomerforeignfrightamt',
'totaltaxamount' => 'setTotaltaxamount',
'totalamount' => 'setTotalamount',
'shiptosuffix' => 'setShiptosuffix',
'billtosuffix' => 'setBilltosuffix',
'freightamount' => 'setFreightamount',
'paymentterms' => 'setPaymentterms',
'orderdate' => 'setOrderdate',
'carrier' => 'setCarrier',
'carrierdescription' => 'setCarrierdescription',
'discountamount' => 'setDiscountamount',
'taxtype' => 'setTaxtype',
'enduserponumber' => 'setEnduserponumber',
'freightforwardercode' => 'setFreightforwardercode',
'creditmemoreasoncode' => 'setCreditmemoreasoncode'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customernumber' => 'getCustomernumber',
'invoicenumber' => 'getInvoicenumber',
'invoicedate' => 'getInvoicedate',
'invoicetype' => 'getInvoicetype',
'customerordernumber' => 'getCustomerordernumber',
'customerfreightamount' => 'getCustomerfreightamount',
'customerforeignfrightamt' => 'getCustomerforeignfrightamt',
'totaltaxamount' => 'getTotaltaxamount',
'totalamount' => 'getTotalamount',
'shiptosuffix' => 'getShiptosuffix',
'billtosuffix' => 'getBilltosuffix',
'freightamount' => 'getFreightamount',
'paymentterms' => 'getPaymentterms',
'orderdate' => 'getOrderdate',
'carrier' => 'getCarrier',
'carrierdescription' => 'getCarrierdescription',
'discountamount' => 'getDiscountamount',
'taxtype' => 'getTaxtype',
'enduserponumber' => 'getEnduserponumber',
'freightforwardercode' => 'getFreightforwardercode',
'creditmemoreasoncode' => 'getCreditmemoreasoncode'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customernumber'] = isset($data['customernumber']) ? $data['customernumber'] : null;
        $this->container['invoicenumber'] = isset($data['invoicenumber']) ? $data['invoicenumber'] : null;
        $this->container['invoicedate'] = isset($data['invoicedate']) ? $data['invoicedate'] : null;
        $this->container['invoicetype'] = isset($data['invoicetype']) ? $data['invoicetype'] : null;
        $this->container['customerordernumber'] = isset($data['customerordernumber']) ? $data['customerordernumber'] : null;
        $this->container['customerfreightamount'] = isset($data['customerfreightamount']) ? $data['customerfreightamount'] : null;
        $this->container['customerforeignfrightamt'] = isset($data['customerforeignfrightamt']) ? $data['customerforeignfrightamt'] : null;
        $this->container['totaltaxamount'] = isset($data['totaltaxamount']) ? $data['totaltaxamount'] : null;
        $this->container['totalamount'] = isset($data['totalamount']) ? $data['totalamount'] : null;
        $this->container['shiptosuffix'] = isset($data['shiptosuffix']) ? $data['shiptosuffix'] : null;
        $this->container['billtosuffix'] = isset($data['billtosuffix']) ? $data['billtosuffix'] : null;
        $this->container['freightamount'] = isset($data['freightamount']) ? $data['freightamount'] : null;
        $this->container['paymentterms'] = isset($data['paymentterms']) ? $data['paymentterms'] : null;
        $this->container['orderdate'] = isset($data['orderdate']) ? $data['orderdate'] : null;
        $this->container['carrier'] = isset($data['carrier']) ? $data['carrier'] : null;
        $this->container['carrierdescription'] = isset($data['carrierdescription']) ? $data['carrierdescription'] : null;
        $this->container['discountamount'] = isset($data['discountamount']) ? $data['discountamount'] : null;
        $this->container['taxtype'] = isset($data['taxtype']) ? $data['taxtype'] : null;
        $this->container['enduserponumber'] = isset($data['enduserponumber']) ? $data['enduserponumber'] : null;
        $this->container['freightforwardercode'] = isset($data['freightforwardercode']) ? $data['freightforwardercode'] : null;
        $this->container['creditmemoreasoncode'] = isset($data['creditmemoreasoncode']) ? $data['creditmemoreasoncode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customernumber
     *
     * @return string
     */
    public function getCustomernumber()
    {
        return $this->container['customernumber'];
    }

    /**
     * Sets customernumber
     *
     * @param string $customernumber customernumber
     *
     * @return $this
     */
    public function setCustomernumber($customernumber)
    {
        $this->container['customernumber'] = $customernumber;

        return $this;
    }

    /**
     * Gets invoicenumber
     *
     * @return string
     */
    public function getInvoicenumber()
    {
        return $this->container['invoicenumber'];
    }

    /**
     * Sets invoicenumber
     *
     * @param string $invoicenumber invoicenumber
     *
     * @return $this
     */
    public function setInvoicenumber($invoicenumber)
    {
        $this->container['invoicenumber'] = $invoicenumber;

        return $this;
    }

    /**
     * Gets invoicedate
     *
     * @return \DateTime
     */
    public function getInvoicedate()
    {
        return $this->container['invoicedate'];
    }

    /**
     * Sets invoicedate
     *
     * @param \DateTime $invoicedate invoicedate
     *
     * @return $this
     */
    public function setInvoicedate($invoicedate)
    {
        $this->container['invoicedate'] = $invoicedate;

        return $this;
    }

    /**
     * Gets invoicetype
     *
     * @return string
     */
    public function getInvoicetype()
    {
        return $this->container['invoicetype'];
    }

    /**
     * Sets invoicetype
     *
     * @param string $invoicetype invoicetype
     *
     * @return $this
     */
    public function setInvoicetype($invoicetype)
    {
        $this->container['invoicetype'] = $invoicetype;

        return $this;
    }

    /**
     * Gets customerordernumber
     *
     * @return string
     */
    public function getCustomerordernumber()
    {
        return $this->container['customerordernumber'];
    }

    /**
     * Sets customerordernumber
     *
     * @param string $customerordernumber customerordernumber
     *
     * @return $this
     */
    public function setCustomerordernumber($customerordernumber)
    {
        $this->container['customerordernumber'] = $customerordernumber;

        return $this;
    }

    /**
     * Gets customerfreightamount
     *
     * @return double
     */
    public function getCustomerfreightamount()
    {
        return $this->container['customerfreightamount'];
    }

    /**
     * Sets customerfreightamount
     *
     * @param double $customerfreightamount customerfreightamount
     *
     * @return $this
     */
    public function setCustomerfreightamount($customerfreightamount)
    {
        $this->container['customerfreightamount'] = $customerfreightamount;

        return $this;
    }

    /**
     * Gets customerforeignfrightamt
     *
     * @return float
     */
    public function getCustomerforeignfrightamt()
    {
        return $this->container['customerforeignfrightamt'];
    }

    /**
     * Sets customerforeignfrightamt
     *
     * @param float $customerforeignfrightamt customerforeignfrightamt
     *
     * @return $this
     */
    public function setCustomerforeignfrightamt($customerforeignfrightamt)
    {
        $this->container['customerforeignfrightamt'] = $customerforeignfrightamt;

        return $this;
    }

    /**
     * Gets totaltaxamount
     *
     * @return double
     */
    public function getTotaltaxamount()
    {
        return $this->container['totaltaxamount'];
    }

    /**
     * Sets totaltaxamount
     *
     * @param double $totaltaxamount totaltaxamount
     *
     * @return $this
     */
    public function setTotaltaxamount($totaltaxamount)
    {
        $this->container['totaltaxamount'] = $totaltaxamount;

        return $this;
    }

    /**
     * Gets totalamount
     *
     * @return double
     */
    public function getTotalamount()
    {
        return $this->container['totalamount'];
    }

    /**
     * Sets totalamount
     *
     * @param double $totalamount totalamount
     *
     * @return $this
     */
    public function setTotalamount($totalamount)
    {
        $this->container['totalamount'] = $totalamount;

        return $this;
    }

    /**
     * Gets shiptosuffix
     *
     * @return string
     */
    public function getShiptosuffix()
    {
        return $this->container['shiptosuffix'];
    }

    /**
     * Sets shiptosuffix
     *
     * @param string $shiptosuffix shiptosuffix
     *
     * @return $this
     */
    public function setShiptosuffix($shiptosuffix)
    {
        $this->container['shiptosuffix'] = $shiptosuffix;

        return $this;
    }

    /**
     * Gets billtosuffix
     *
     * @return string
     */
    public function getBilltosuffix()
    {
        return $this->container['billtosuffix'];
    }

    /**
     * Sets billtosuffix
     *
     * @param string $billtosuffix billtosuffix
     *
     * @return $this
     */
    public function setBilltosuffix($billtosuffix)
    {
        $this->container['billtosuffix'] = $billtosuffix;

        return $this;
    }

    /**
     * Gets freightamount
     *
     * @return double
     */
    public function getFreightamount()
    {
        return $this->container['freightamount'];
    }

    /**
     * Sets freightamount
     *
     * @param double $freightamount freightamount
     *
     * @return $this
     */
    public function setFreightamount($freightamount)
    {
        $this->container['freightamount'] = $freightamount;

        return $this;
    }

    /**
     * Gets paymentterms
     *
     * @return string
     */
    public function getPaymentterms()
    {
        return $this->container['paymentterms'];
    }

    /**
     * Sets paymentterms
     *
     * @param string $paymentterms paymentterms
     *
     * @return $this
     */
    public function setPaymentterms($paymentterms)
    {
        $this->container['paymentterms'] = $paymentterms;

        return $this;
    }

    /**
     * Gets orderdate
     *
     * @return string
     */
    public function getOrderdate()
    {
        return $this->container['orderdate'];
    }

    /**
     * Sets orderdate
     *
     * @param string $orderdate orderdate
     *
     * @return $this
     */
    public function setOrderdate($orderdate)
    {
        $this->container['orderdate'] = $orderdate;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return string
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string $carrier carrier
     *
     * @return $this
     */
    public function setCarrier($carrier)
    {
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets carrierdescription
     *
     * @return string
     */
    public function getCarrierdescription()
    {
        return $this->container['carrierdescription'];
    }

    /**
     * Sets carrierdescription
     *
     * @param string $carrierdescription carrierdescription
     *
     * @return $this
     */
    public function setCarrierdescription($carrierdescription)
    {
        $this->container['carrierdescription'] = $carrierdescription;

        return $this;
    }

    /**
     * Gets discountamount
     *
     * @return double
     */
    public function getDiscountamount()
    {
        return $this->container['discountamount'];
    }

    /**
     * Sets discountamount
     *
     * @param double $discountamount discountamount
     *
     * @return $this
     */
    public function setDiscountamount($discountamount)
    {
        $this->container['discountamount'] = $discountamount;

        return $this;
    }

    /**
     * Gets taxtype
     *
     * @return string
     */
    public function getTaxtype()
    {
        return $this->container['taxtype'];
    }

    /**
     * Sets taxtype
     *
     * @param string $taxtype taxtype
     *
     * @return $this
     */
    public function setTaxtype($taxtype)
    {
        $this->container['taxtype'] = $taxtype;

        return $this;
    }

    /**
     * Gets enduserponumber
     *
     * @return string
     */
    public function getEnduserponumber()
    {
        return $this->container['enduserponumber'];
    }

    /**
     * Sets enduserponumber
     *
     * @param string $enduserponumber enduserponumber
     *
     * @return $this
     */
    public function setEnduserponumber($enduserponumber)
    {
        $this->container['enduserponumber'] = $enduserponumber;

        return $this;
    }

    /**
     * Gets freightforwardercode
     *
     * @return string
     */
    public function getFreightforwardercode()
    {
        return $this->container['freightforwardercode'];
    }

    /**
     * Sets freightforwardercode
     *
     * @param string $freightforwardercode freightforwardercode
     *
     * @return $this
     */
    public function setFreightforwardercode($freightforwardercode)
    {
        $this->container['freightforwardercode'] = $freightforwardercode;

        return $this;
    }

    /**
     * Gets creditmemoreasoncode
     *
     * @return string
     */
    public function getCreditmemoreasoncode()
    {
        return $this->container['creditmemoreasoncode'];
    }

    /**
     * Sets creditmemoreasoncode
     *
     * @param string $creditmemoreasoncode creditmemoreasoncode
     *
     * @return $this
     */
    public function setCreditmemoreasoncode($creditmemoreasoncode)
    {
        $this->container['creditmemoreasoncode'] = $creditmemoreasoncode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
