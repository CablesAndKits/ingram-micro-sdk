<?php
/**
 * OrderCreateV40Vse0OrdercreaterequestOrdercreatedetailsLines
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ingram Micro eCommerce APIs
 *
 * Ingram Micro API collection for automating eCommerce business processes including orering and product search.
 *
 * OpenAPI spec version: 1.0
 * Contact: apiportalsupport@ingrammicro.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.14
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OrderCreateV40Vse0OrdercreaterequestOrdercreatedetailsLines Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderCreateV40Vse0OrdercreaterequestOrdercreatedetailsLines implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderCreate_v4_0_vse0_ordercreaterequest_ordercreatedetails_lines';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'linetype' => 'string',
'linenumber' => 'string',
'ingrampartnumber' => 'string',
'quantity' => 'string',
'vendorpartnumber' => 'string',
'customerpartnumber' => 'string',
'upc_code' => 'string',
'warehouseid' => 'string',
'unitprice' => 'string',
'enduser' => '\Swagger\Client\Model\OrderCreateV40Vse0OrdercreaterequestOrdercreatedetailsEnduser',
'productextendedspecs' => '\Swagger\Client\Model\OrderCreateV40Vse0OrdercreaterequestOrdercreatedetailsProductextendedspecs'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'linetype' => null,
'linenumber' => null,
'ingrampartnumber' => null,
'quantity' => null,
'vendorpartnumber' => null,
'customerpartnumber' => null,
'upc_code' => null,
'warehouseid' => null,
'unitprice' => null,
'enduser' => null,
'productextendedspecs' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'linetype' => 'linetype',
'linenumber' => 'linenumber',
'ingrampartnumber' => 'ingrampartnumber',
'quantity' => 'quantity',
'vendorpartnumber' => 'vendorpartnumber',
'customerpartnumber' => 'customerpartnumber',
'upc_code' => 'UPCCode',
'warehouseid' => 'warehouseid',
'unitprice' => 'unitprice',
'enduser' => 'enduser',
'productextendedspecs' => 'productextendedspecs'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'linetype' => 'setLinetype',
'linenumber' => 'setLinenumber',
'ingrampartnumber' => 'setIngrampartnumber',
'quantity' => 'setQuantity',
'vendorpartnumber' => 'setVendorpartnumber',
'customerpartnumber' => 'setCustomerpartnumber',
'upc_code' => 'setUpcCode',
'warehouseid' => 'setWarehouseid',
'unitprice' => 'setUnitprice',
'enduser' => 'setEnduser',
'productextendedspecs' => 'setProductextendedspecs'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'linetype' => 'getLinetype',
'linenumber' => 'getLinenumber',
'ingrampartnumber' => 'getIngrampartnumber',
'quantity' => 'getQuantity',
'vendorpartnumber' => 'getVendorpartnumber',
'customerpartnumber' => 'getCustomerpartnumber',
'upc_code' => 'getUpcCode',
'warehouseid' => 'getWarehouseid',
'unitprice' => 'getUnitprice',
'enduser' => 'getEnduser',
'productextendedspecs' => 'getProductextendedspecs'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LINETYPE_P = 'P';
const LINETYPE_C = 'C';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLinetypeAllowableValues()
    {
        return [
            self::LINETYPE_P,
self::LINETYPE_C,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['linetype'] = isset($data['linetype']) ? $data['linetype'] : null;
        $this->container['linenumber'] = isset($data['linenumber']) ? $data['linenumber'] : null;
        $this->container['ingrampartnumber'] = isset($data['ingrampartnumber']) ? $data['ingrampartnumber'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['vendorpartnumber'] = isset($data['vendorpartnumber']) ? $data['vendorpartnumber'] : null;
        $this->container['customerpartnumber'] = isset($data['customerpartnumber']) ? $data['customerpartnumber'] : null;
        $this->container['upc_code'] = isset($data['upc_code']) ? $data['upc_code'] : null;
        $this->container['warehouseid'] = isset($data['warehouseid']) ? $data['warehouseid'] : null;
        $this->container['unitprice'] = isset($data['unitprice']) ? $data['unitprice'] : null;
        $this->container['enduser'] = isset($data['enduser']) ? $data['enduser'] : null;
        $this->container['productextendedspecs'] = isset($data['productextendedspecs']) ? $data['productextendedspecs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLinetypeAllowableValues();
        if (!is_null($this->container['linetype']) && !in_array($this->container['linetype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'linetype', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['ingrampartnumber'] === null) {
            $invalidProperties[] = "'ingrampartnumber' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets linetype
     *
     * @return string
     */
    public function getLinetype()
    {
        return $this->container['linetype'];
    }

    /**
     * Sets linetype
     *
     * @param string $linetype Values are “P” for product or “C” for comments. This can be left blank when ordering product and a “P” will be assumed.  If you are adding a COMMENT, then this value must be “C”.  Extended spec for comments:   Attribute Name: “commenttext” Attribute Value: “thank you for the order”  To make the comment invisible to the packing slip place “///” in front of the comment in the Attribute Value field.  This will allow the Ingram sales rep to see the comment on the order but will not forward on to shipping documents.
     *
     * @return $this
     */
    public function setLinetype($linetype)
    {
        $allowedValues = $this->getLinetypeAllowableValues();
        if (!is_null($linetype) && !in_array($linetype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'linetype', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['linetype'] = $linetype;

        return $this;
    }

    /**
     * Gets linenumber
     *
     * @return string
     */
    public function getLinenumber()
    {
        return $this->container['linenumber'];
    }

    /**
     * Sets linenumber
     *
     * @param string $linenumber This is used when a partner wants to use their own line number. Can be left blank.
     *
     * @return $this
     */
    public function setLinenumber($linenumber)
    {
        $this->container['linenumber'] = $linenumber;

        return $this;
    }

    /**
     * Gets ingrampartnumber
     *
     * @return string
     */
    public function getIngrampartnumber()
    {
        return $this->container['ingrampartnumber'];
    }

    /**
     * Sets ingrampartnumber
     *
     * @param string $ingrampartnumber This is the Ingram sku number to be used for placing an order.
     *
     * @return $this
     */
    public function setIngrampartnumber($ingrampartnumber)
    {
        $this->container['ingrampartnumber'] = $ingrampartnumber;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return string
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param string $quantity The quantity that is to be ordered.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets vendorpartnumber
     *
     * @return string
     */
    public function getVendorpartnumber()
    {
        return $this->container['vendorpartnumber'];
    }

    /**
     * Sets vendorpartnumber
     *
     * @param string $vendorpartnumber The Manufacturer part number. Can be used to place an order instead of the Ingram sku.  If there are multiple Ingram part numbers to one vendor part number.  The order will be rejected.
     *
     * @return $this
     */
    public function setVendorpartnumber($vendorpartnumber)
    {
        $this->container['vendorpartnumber'] = $vendorpartnumber;

        return $this;
    }

    /**
     * Gets customerpartnumber
     *
     * @return string
     */
    public function getCustomerpartnumber()
    {
        return $this->container['customerpartnumber'];
    }

    /**
     * Sets customerpartnumber
     *
     * @param string $customerpartnumber This is the Customers unique part numbers that must be crossed referenced to the Ingram Micro Sku before it can be used.  Please contact your sales rep for additional information on how to set this up.
     *
     * @return $this
     */
    public function setCustomerpartnumber($customerpartnumber)
    {
        $this->container['customerpartnumber'] = $customerpartnumber;

        return $this;
    }

    /**
     * Gets upc_code
     *
     * @return string
     */
    public function getUpcCode()
    {
        return $this->container['upc_code'];
    }

    /**
     * Sets upc_code
     *
     * @param string $upc_code upc_code
     *
     * @return $this
     */
    public function setUpcCode($upc_code)
    {
        $this->container['upc_code'] = $upc_code;

        return $this;
    }

    /**
     * Gets warehouseid
     *
     * @return string
     */
    public function getWarehouseid()
    {
        return $this->container['warehouseid'];
    }

    /**
     * Sets warehouseid
     *
     * @param string $warehouseid warehouseid
     *
     * @return $this
     */
    public function setWarehouseid($warehouseid)
    {
        $this->container['warehouseid'] = $warehouseid;

        return $this;
    }

    /**
     * Gets unitprice
     *
     * @return string
     */
    public function getUnitprice()
    {
        return $this->container['unitprice'];
    }

    /**
     * Sets unitprice
     *
     * @param string $unitprice This is a requested price from the customer. Pre-approval is necessary before using this feature.  A methodology called price variance to manage requested pricing needs to be setup in advance by your sales rep.  If unit price is provided without this advanced setup the unit price will be ignored and standard Ingram Micro pricing will apply.
     *
     * @return $this
     */
    public function setUnitprice($unitprice)
    {
        $this->container['unitprice'] = $unitprice;

        return $this;
    }

    /**
     * Gets enduser
     *
     * @return \Swagger\Client\Model\OrderCreateV40Vse0OrdercreaterequestOrdercreatedetailsEnduser
     */
    public function getEnduser()
    {
        return $this->container['enduser'];
    }

    /**
     * Sets enduser
     *
     * @param \Swagger\Client\Model\OrderCreateV40Vse0OrdercreaterequestOrdercreatedetailsEnduser $enduser enduser
     *
     * @return $this
     */
    public function setEnduser($enduser)
    {
        $this->container['enduser'] = $enduser;

        return $this;
    }

    /**
     * Gets productextendedspecs
     *
     * @return \Swagger\Client\Model\OrderCreateV40Vse0OrdercreaterequestOrdercreatedetailsProductextendedspecs
     */
    public function getProductextendedspecs()
    {
        return $this->container['productextendedspecs'];
    }

    /**
     * Sets productextendedspecs
     *
     * @param \Swagger\Client\Model\OrderCreateV40Vse0OrdercreaterequestOrdercreatedetailsProductextendedspecs $productextendedspecs productextendedspecs
     *
     * @return $this
     */
    public function setProductextendedspecs($productextendedspecs)
    {
        $this->container['productextendedspecs'] = $productextendedspecs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
