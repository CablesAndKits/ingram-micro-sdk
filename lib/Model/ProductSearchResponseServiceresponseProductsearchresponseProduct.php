<?php
/**
 * ProductSearchResponseServiceresponseProductsearchresponseProduct
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ingram Micro eCommerce APIs
 *
 * Ingram Micro API collection for automating eCommerce business processes including orering and product search.
 *
 * OpenAPI spec version: 1.0
 * Contact: apiportalsupport@ingrammicro.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.14
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProductSearchResponseServiceresponseProductsearchresponseProduct Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductSearchResponseServiceresponseProductsearchresponseProduct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'productSearchResponse_serviceresponse_productsearchresponse_product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vendor' => 'string',
'vendornumber' => 'string',
'ingrampartnumber' => 'string',
'vendorpartnumber' => 'string',
'customerpartnumber' => 'string',
'iscustomerauthorized' => 'string',
'partdescription' => 'string',
'upc' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'vendor' => null,
'vendornumber' => null,
'ingrampartnumber' => null,
'vendorpartnumber' => null,
'customerpartnumber' => null,
'iscustomerauthorized' => null,
'partdescription' => null,
'upc' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vendor' => 'vendor',
'vendornumber' => 'vendornumber',
'ingrampartnumber' => 'ingrampartnumber',
'vendorpartnumber' => 'vendorpartnumber',
'customerpartnumber' => 'customerpartnumber',
'iscustomerauthorized' => 'iscustomerauthorized',
'partdescription' => 'partdescription',
'upc' => 'UPC'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vendor' => 'setVendor',
'vendornumber' => 'setVendornumber',
'ingrampartnumber' => 'setIngrampartnumber',
'vendorpartnumber' => 'setVendorpartnumber',
'customerpartnumber' => 'setCustomerpartnumber',
'iscustomerauthorized' => 'setIscustomerauthorized',
'partdescription' => 'setPartdescription',
'upc' => 'setUpc'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vendor' => 'getVendor',
'vendornumber' => 'getVendornumber',
'ingrampartnumber' => 'getIngrampartnumber',
'vendorpartnumber' => 'getVendorpartnumber',
'customerpartnumber' => 'getCustomerpartnumber',
'iscustomerauthorized' => 'getIscustomerauthorized',
'partdescription' => 'getPartdescription',
'upc' => 'getUpc'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
        $this->container['vendornumber'] = isset($data['vendornumber']) ? $data['vendornumber'] : null;
        $this->container['ingrampartnumber'] = isset($data['ingrampartnumber']) ? $data['ingrampartnumber'] : null;
        $this->container['vendorpartnumber'] = isset($data['vendorpartnumber']) ? $data['vendorpartnumber'] : null;
        $this->container['customerpartnumber'] = isset($data['customerpartnumber']) ? $data['customerpartnumber'] : null;
        $this->container['iscustomerauthorized'] = isset($data['iscustomerauthorized']) ? $data['iscustomerauthorized'] : null;
        $this->container['partdescription'] = isset($data['partdescription']) ? $data['partdescription'] : null;
        $this->container['upc'] = isset($data['upc']) ? $data['upc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vendor
     *
     * @return string
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param string $vendor Name of the vendor, manufacture or brand.
     *
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets vendornumber
     *
     * @return string
     */
    public function getVendornumber()
    {
        return $this->container['vendornumber'];
    }

    /**
     * Sets vendornumber
     *
     * @param string $vendornumber 4 digit unique vendor # creted by Ingram
     *
     * @return $this
     */
    public function setVendornumber($vendornumber)
    {
        $this->container['vendornumber'] = $vendornumber;

        return $this;
    }

    /**
     * Gets ingrampartnumber
     *
     * @return string
     */
    public function getIngrampartnumber()
    {
        return $this->container['ingrampartnumber'];
    }

    /**
     * Sets ingrampartnumber
     *
     * @param string $ingrampartnumber Unique Ingram part number
     *
     * @return $this
     */
    public function setIngrampartnumber($ingrampartnumber)
    {
        $this->container['ingrampartnumber'] = $ingrampartnumber;

        return $this;
    }

    /**
     * Gets vendorpartnumber
     *
     * @return string
     */
    public function getVendorpartnumber()
    {
        return $this->container['vendorpartnumber'];
    }

    /**
     * Sets vendorpartnumber
     *
     * @param string $vendorpartnumber Vendor provided number
     *
     * @return $this
     */
    public function setVendorpartnumber($vendorpartnumber)
    {
        $this->container['vendorpartnumber'] = $vendorpartnumber;

        return $this;
    }

    /**
     * Gets customerpartnumber
     *
     * @return string
     */
    public function getCustomerpartnumber()
    {
        return $this->container['customerpartnumber'];
    }

    /**
     * Sets customerpartnumber
     *
     * @param string $customerpartnumber Customerâ€™s designated part number.
     *
     * @return $this
     */
    public function setCustomerpartnumber($customerpartnumber)
    {
        $this->container['customerpartnumber'] = $customerpartnumber;

        return $this;
    }

    /**
     * Gets iscustomerauthorized
     *
     * @return string
     */
    public function getIscustomerauthorized()
    {
        return $this->container['iscustomerauthorized'];
    }

    /**
     * Sets iscustomerauthorized
     *
     * @param string $iscustomerauthorized Is customer authorized for purchase of this product?
     *
     * @return $this
     */
    public function setIscustomerauthorized($iscustomerauthorized)
    {
        $this->container['iscustomerauthorized'] = $iscustomerauthorized;

        return $this;
    }

    /**
     * Gets partdescription
     *
     * @return string
     */
    public function getPartdescription()
    {
        return $this->container['partdescription'];
    }

    /**
     * Sets partdescription
     *
     * @param string $partdescription Part description
     *
     * @return $this
     */
    public function setPartdescription($partdescription)
    {
        $this->container['partdescription'] = $partdescription;

        return $this;
    }

    /**
     * Gets upc
     *
     * @return string
     */
    public function getUpc()
    {
        return $this->container['upc'];
    }

    /**
     * Sets upc
     *
     * @param string $upc Universal Product Code
     *
     * @return $this
     */
    public function setUpc($upc)
    {
        $this->container['upc'] = $upc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
