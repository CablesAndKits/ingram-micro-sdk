<?php
/**
 * MultiSKUPriceAndStockAPIV40ServiceVs0ServicerequestPriceandstockrequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ingram Micro eCommerce APIs
 *
 * Ingram Micro API collection for automating eCommerce business processes including orering and product search.
 *
 * OpenAPI spec version: 1.0
 * Contact: apiportalsupport@ingrammicro.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.14
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MultiSKUPriceAndStockAPIV40ServiceVs0ServicerequestPriceandstockrequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MultiSKUPriceAndStockAPIV40ServiceVs0ServicerequestPriceandstockrequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MultiSKUPriceAndStockAPI_v4_0_Service_vs0_servicerequest_priceandstockrequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'showwarehouseavailability' => 'string',
'extravailabilityflag' => 'string',
'includeallsystems' => 'bool',
'item' => '\Swagger\Client\Model\MultiSKUPriceAndStockAPIV40ServiceVs0ServicerequestPriceandstockrequestItem'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'showwarehouseavailability' => null,
'extravailabilityflag' => null,
'includeallsystems' => null,
'item' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'showwarehouseavailability' => 'showwarehouseavailability',
'extravailabilityflag' => 'extravailabilityflag',
'includeallsystems' => 'includeallsystems',
'item' => 'item'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'showwarehouseavailability' => 'setShowwarehouseavailability',
'extravailabilityflag' => 'setExtravailabilityflag',
'includeallsystems' => 'setIncludeallsystems',
'item' => 'setItem'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'showwarehouseavailability' => 'getShowwarehouseavailability',
'extravailabilityflag' => 'getExtravailabilityflag',
'includeallsystems' => 'getIncludeallsystems',
'item' => 'getItem'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['showwarehouseavailability'] = isset($data['showwarehouseavailability']) ? $data['showwarehouseavailability'] : null;
        $this->container['extravailabilityflag'] = isset($data['extravailabilityflag']) ? $data['extravailabilityflag'] : null;
        $this->container['includeallsystems'] = isset($data['includeallsystems']) ? $data['includeallsystems'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets showwarehouseavailability
     *
     * @return string
     */
    public function getShowwarehouseavailability()
    {
        return $this->container['showwarehouseavailability'];
    }

    /**
     * Sets showwarehouseavailability
     *
     * @param string $showwarehouseavailability True/false to show the availability of individual warehouses
     *
     * @return $this
     */
    public function setShowwarehouseavailability($showwarehouseavailability)
    {
        $this->container['showwarehouseavailability'] = $showwarehouseavailability;

        return $this;
    }

    /**
     * Gets extravailabilityflag
     *
     * @return string
     */
    public function getExtravailabilityflag()
    {
        return $this->container['extravailabilityflag'];
    }

    /**
     * Sets extravailabilityflag
     *
     * @param string $extravailabilityflag Y/N to show extra availability flag
     *
     * @return $this
     */
    public function setExtravailabilityflag($extravailabilityflag)
    {
        $this->container['extravailabilityflag'] = $extravailabilityflag;

        return $this;
    }

    /**
     * Gets includeallsystems
     *
     * @return bool
     */
    public function getIncludeallsystems()
    {
        return $this->container['includeallsystems'];
    }

    /**
     * Sets includeallsystems
     *
     * @param bool $includeallsystems Flag to indicate if the price and stock information is required for all Ingram Micro systems. If it is set to true, the price and stock details will be returned from all Ingram Micro systems and if false, the price and stock will have returned from the system where the reseller number is set up in.
     *
     * @return $this
     */
    public function setIncludeallsystems($includeallsystems)
    {
        $this->container['includeallsystems'] = $includeallsystems;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \Swagger\Client\Model\MultiSKUPriceAndStockAPIV40ServiceVs0ServicerequestPriceandstockrequestItem
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \Swagger\Client\Model\MultiSKUPriceAndStockAPIV40ServiceVs0ServicerequestPriceandstockrequestItem $item item
     *
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
