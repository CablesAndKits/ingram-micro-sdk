<?php
/**
 * MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseWarehousedetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ingram Micro eCommerce APIs
 *
 * Ingram Micro API collection for automating eCommerce business processes including orering and product search.
 *
 * OpenAPI spec version: 1.0
 * Contact: apiportalsupport@ingrammicro.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.14
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseWarehousedetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseWarehousedetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'multiSKUPriceAndStockResponse_serviceresponse_priceandstockresponse_warehousedetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'warehouseid' => 'string',
'warehousedescription' => 'string',
'availablequantity' => 'int',
'onorderquantity' => 'int',
'onholdquantity' => 'string',
'etadate' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'warehouseid' => null,
'warehousedescription' => null,
'availablequantity' => null,
'onorderquantity' => null,
'onholdquantity' => null,
'etadate' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'warehouseid' => 'warehouseid',
'warehousedescription' => 'warehousedescription',
'availablequantity' => 'availablequantity',
'onorderquantity' => 'onorderquantity',
'onholdquantity' => 'onholdquantity',
'etadate' => 'etadate'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'warehouseid' => 'setWarehouseid',
'warehousedescription' => 'setWarehousedescription',
'availablequantity' => 'setAvailablequantity',
'onorderquantity' => 'setOnorderquantity',
'onholdquantity' => 'setOnholdquantity',
'etadate' => 'setEtadate'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'warehouseid' => 'getWarehouseid',
'warehousedescription' => 'getWarehousedescription',
'availablequantity' => 'getAvailablequantity',
'onorderquantity' => 'getOnorderquantity',
'onholdquantity' => 'getOnholdquantity',
'etadate' => 'getEtadate'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const WAREHOUSEID__10_MIRA_LOMA_CA = '10-Mira Loma CA';
const WAREHOUSEID__20_CARROLLTON_TX = '20-Carrollton TX';
const WAREHOUSEID__30_MILLINGTON_TN = '30-Millington TN';
const WAREHOUSEID__40_CAROL_STREAM_IL = '40-Carol Stream IL';
const WAREHOUSEID__80_JONESTOWN_PA = '80-Jonestown PA';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWarehouseidAllowableValues()
    {
        return [
            self::WAREHOUSEID__10_MIRA_LOMA_CA,
self::WAREHOUSEID__20_CARROLLTON_TX,
self::WAREHOUSEID__30_MILLINGTON_TN,
self::WAREHOUSEID__40_CAROL_STREAM_IL,
self::WAREHOUSEID__80_JONESTOWN_PA,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['warehouseid'] = isset($data['warehouseid']) ? $data['warehouseid'] : null;
        $this->container['warehousedescription'] = isset($data['warehousedescription']) ? $data['warehousedescription'] : null;
        $this->container['availablequantity'] = isset($data['availablequantity']) ? $data['availablequantity'] : null;
        $this->container['onorderquantity'] = isset($data['onorderquantity']) ? $data['onorderquantity'] : null;
        $this->container['onholdquantity'] = isset($data['onholdquantity']) ? $data['onholdquantity'] : null;
        $this->container['etadate'] = isset($data['etadate']) ? $data['etadate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getWarehouseidAllowableValues();
        if (!is_null($this->container['warehouseid']) && !in_array($this->container['warehouseid'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'warehouseid', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets warehouseid
     *
     * @return string
     */
    public function getWarehouseid()
    {
        return $this->container['warehouseid'];
    }

    /**
     * Sets warehouseid
     *
     * @param string $warehouseid Unique 2-digit code of the Ingram Micro warehouse
     *
     * @return $this
     */
    public function setWarehouseid($warehouseid)
    {
        $allowedValues = $this->getWarehouseidAllowableValues();
        if (!is_null($warehouseid) && !in_array($warehouseid, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'warehouseid', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['warehouseid'] = $warehouseid;

        return $this;
    }

    /**
     * Gets warehousedescription
     *
     * @return string
     */
    public function getWarehousedescription()
    {
        return $this->container['warehousedescription'];
    }

    /**
     * Sets warehousedescription
     *
     * @param string $warehousedescription City of the Ingram Micro warehouse location
     *
     * @return $this
     */
    public function setWarehousedescription($warehousedescription)
    {
        $this->container['warehousedescription'] = $warehousedescription;

        return $this;
    }

    /**
     * Gets availablequantity
     *
     * @return int
     */
    public function getAvailablequantity()
    {
        return $this->container['availablequantity'];
    }

    /**
     * Sets availablequantity
     *
     * @param int $availablequantity On hand available quantity
     *
     * @return $this
     */
    public function setAvailablequantity($availablequantity)
    {
        $this->container['availablequantity'] = $availablequantity;

        return $this;
    }

    /**
     * Gets onorderquantity
     *
     * @return int
     */
    public function getOnorderquantity()
    {
        return $this->container['onorderquantity'];
    }

    /**
     * Sets onorderquantity
     *
     * @param int $onorderquantity On Order quantity
     *
     * @return $this
     */
    public function setOnorderquantity($onorderquantity)
    {
        $this->container['onorderquantity'] = $onorderquantity;

        return $this;
    }

    /**
     * Gets onholdquantity
     *
     * @return string
     */
    public function getOnholdquantity()
    {
        return $this->container['onholdquantity'];
    }

    /**
     * Sets onholdquantity
     *
     * @param string $onholdquantity onholdquantity
     *
     * @return $this
     */
    public function setOnholdquantity($onholdquantity)
    {
        $this->container['onholdquantity'] = $onholdquantity;

        return $this;
    }

    /**
     * Gets etadate
     *
     * @return string
     */
    public function getEtadate()
    {
        return $this->container['etadate'];
    }

    /**
     * Sets etadate
     *
     * @param string $etadate etadate
     *
     * @return $this
     */
    public function setEtadate($etadate)
    {
        $this->container['etadate'] = $etadate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
